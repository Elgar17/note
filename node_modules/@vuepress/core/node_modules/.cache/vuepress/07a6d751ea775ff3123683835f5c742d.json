{"remainingRequest":"D:\\3-blog\\blog-vp\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\3-blog\\blog-vp\\node_modules\\@vuepress\\core\\lib\\client\\app.js","dependencies":[{"path":"D:\\3-blog\\blog-vp\\node_modules\\@vuepress\\core\\lib\\client\\app.js","mtime":499162500000},{"path":"D:\\3-blog\\blog-vp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\3-blog\\blog-vp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkQ6LzMtYmxvZy9ibG9nLXZwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKCi8qIGdsb2JhbCBWVUVQUkVTU19URU1QX1BBVEggKi8KaW1wb3J0IFZ1ZSBmcm9tICd2dWUnOwppbXBvcnQgUm91dGVyIGZyb20gJ3Z1ZS1yb3V0ZXInOwppbXBvcnQgZGF0YU1peGluIGZyb20gJy4vZGF0YU1peGluJzsKaW1wb3J0IHsgcm91dGVzIH0gZnJvbSAnQGludGVybmFsL3JvdXRlcyc7CmltcG9ydCB7IHNpdGVEYXRhIH0gZnJvbSAnQGludGVybmFsL3NpdGVEYXRhJzsKaW1wb3J0IGFwcEVuaGFuY2VycyBmcm9tICdAaW50ZXJuYWwvYXBwLWVuaGFuY2Vycyc7CmltcG9ydCBnbG9iYWxVSUNvbXBvbmVudHMgZnJvbSAnQGludGVybmFsL2dsb2JhbC11aSc7CmltcG9ydCBDbGllbnRDb21wdXRlZE1peGluIGZyb20gJ0B0cmFuc2Zvcm0vQ2xpZW50Q29tcHV0ZWRNaXhpbic7CmltcG9ydCBWdWVQcmVzcyBmcm9tICcuL3BsdWdpbnMvVnVlUHJlc3MnOwppbXBvcnQgeyBoYW5kbGVSZWRpcmVjdEZvckNsZWFuVXJscyB9IGZyb20gJy4vcmVkaXJlY3QuanMnOwppbXBvcnQgeyBnZXRMYXlvdXRBc3luY0NvbXBvbmVudCB9IGZyb20gJy4vdXRpbCc7IC8vIGJ1aWx0LWluIGNvbXBvbmVudHMKCmltcG9ydCBDb250ZW50IGZyb20gJy4vY29tcG9uZW50cy9Db250ZW50LmpzJzsKaW1wb3J0IENvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIGZyb20gJy4vY29tcG9uZW50cy9Db250ZW50U2xvdHNEaXN0cmlidXRvcic7CmltcG9ydCBPdXRib3VuZExpbmsgZnJvbSAnLi9jb21wb25lbnRzL091dGJvdW5kTGluay52dWUnOwppbXBvcnQgQ2xpZW50T25seSBmcm9tICcuL2NvbXBvbmVudHMvQ2xpZW50T25seSc7IC8vIHN1Z2dlc3QgZGV2IHNlcnZlciByZXN0YXJ0IG9uIGJhc2UgY2hhbmdlCgppZiAobW9kdWxlLmhvdCkgewogIHZhciBwcmV2QmFzZSA9IHNpdGVEYXRhLmJhc2U7CiAgbW9kdWxlLmhvdC5hY2NlcHQoVlVFUFJFU1NfVEVNUF9QQVRIICsgJy9pbnRlcm5hbC9zaXRlRGF0YS5qcycsIGZ1bmN0aW9uICgpIHsKICAgIGlmIChzaXRlRGF0YS5iYXNlICE9PSBwcmV2QmFzZSkgewogICAgICB3aW5kb3cuYWxlcnQoIlt2dWVwcmVzc10gU2l0ZSBiYXNlIGhhcyBjaGFuZ2VkLiAiICsgIlBsZWFzZSByZXN0YXJ0IGRldiBzZXJ2ZXIgdG8gZW5zdXJlIGNvcnJlY3QgYXNzZXQgcGF0aHMuIik7CiAgICB9CiAgfSk7Cn0KClZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlOwpWdWUudXNlKFJvdXRlcik7ClZ1ZS51c2UoVnVlUHJlc3MpOyAvLyBtaXhpbiBmb3IgZXhwb3NpbmcgJHNpdGUgYW5kICRwYWdlCgpWdWUubWl4aW4oZGF0YU1peGluKENsaWVudENvbXB1dGVkTWl4aW4sIHNpdGVEYXRhKSk7IC8vIGNvbXBvbmVudCBmb3IgcmVuZGVyaW5nIG1hcmtkb3duIGNvbnRlbnQgYW5kIHNldHRpbmcgdGl0bGUgZXRjLgoKLyogZXNsaW50LWRpc2FibGUgdnVlL21hdGNoLWNvbXBvbmVudC1maWxlLW5hbWUgKi8KClZ1ZS5jb21wb25lbnQoJ0NvbnRlbnQnLCBDb250ZW50KTsKVnVlLmNvbXBvbmVudCgnQ29udGVudFNsb3RzRGlzdHJpYnV0b3InLCBDb250ZW50U2xvdHNEaXN0cmlidXRvcik7ClZ1ZS5jb21wb25lbnQoJ091dGJvdW5kTGluaycsIE91dGJvdW5kTGluayk7IC8vIGNvbXBvbmVudCBmb3IgY2xpZW50LW9ubHkgY29udGVudAoKVnVlLmNvbXBvbmVudCgnQ2xpZW50T25seScsIENsaWVudE9ubHkpOyAvLyBjb3JlIGNvbXBvbmVudHMKClZ1ZS5jb21wb25lbnQoJ0xheW91dCcsIGdldExheW91dEFzeW5jQ29tcG9uZW50KCdMYXlvdXQnKSk7ClZ1ZS5jb21wb25lbnQoJ05vdEZvdW5kJywgZ2V0TGF5b3V0QXN5bmNDb21wb25lbnQoJ05vdEZvdW5kJykpOwovKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdnVlL21hdGNoLWNvbXBvbmVudC1maWxlLW5hbWUgKi8KLy8gZ2xvYmFsIGhlbHBlciBmb3IgYWRkaW5nIGJhc2UgcGF0aCB0byBhYnNvbHV0ZSB1cmxzCgpWdWUucHJvdG90eXBlLiR3aXRoQmFzZSA9IGZ1bmN0aW9uIChwYXRoKSB7CiAgdmFyIGJhc2UgPSB0aGlzLiRzaXRlLmJhc2U7CgogIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7CiAgICByZXR1cm4gYmFzZSArIHBhdGguc2xpY2UoMSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBwYXRoOwogIH0KfTsKCmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBcHAoX3gpIHsKICByZXR1cm4gX2NyZWF0ZUFwcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfY3JlYXRlQXBwKCkgewogIF9jcmVhdGVBcHAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoaXNTZXJ2ZXIpIHsKICAgIHZhciByb3V0ZXJCYXNlLCByb3V0ZXIsIG9wdGlvbnMsIGFwcDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcm91dGVyQmFzZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5fX1ZVRVBSRVNTX1JPVVRFUl9CQVNFX18gPyB3aW5kb3cuX19WVUVQUkVTU19ST1VURVJfQkFTRV9fIDogc2l0ZURhdGEucm91dGVyQmFzZSB8fCBzaXRlRGF0YS5iYXNlOwogICAgICAgICAgICByb3V0ZXIgPSBuZXcgUm91dGVyKHsKICAgICAgICAgICAgICBiYXNlOiByb3V0ZXJCYXNlLAogICAgICAgICAgICAgIG1vZGU6ICdoaXN0b3J5JywKICAgICAgICAgICAgICBmYWxsYmFjazogZmFsc2UsCiAgICAgICAgICAgICAgcm91dGVzOiByb3V0ZXMsCiAgICAgICAgICAgICAgc2Nyb2xsQmVoYXZpb3I6IGZ1bmN0aW9uIHNjcm9sbEJlaGF2aW9yKHRvLCBmcm9tLCBzYXZlZFBvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICBpZiAoc2F2ZWRQb3NpdGlvbikgewogICAgICAgICAgICAgICAgICByZXR1cm4gc2F2ZWRQb3NpdGlvbjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG8uaGFzaCkgewogICAgICAgICAgICAgICAgICBpZiAoVnVlLiR2dWVwcmVzcy4kZ2V0KCdkaXNhYmxlU2Nyb2xsQmVoYXZpb3InKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogZGVjb2RlVVJJQ29tcG9uZW50KHRvLmhhc2gpCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgICAgICAgeTogMAogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGhhbmRsZVJlZGlyZWN0Rm9yQ2xlYW5VcmxzKHJvdXRlcik7CiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYXBwRW5oYW5jZXJzLmZpbHRlcihmdW5jdGlvbiAoZW5oYW5jZXIpIHsKICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nOwogICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGVuaGFuY2VyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGVuaGFuY2VyKHsKICAgICAgICAgICAgICAgIFZ1ZTogVnVlLAogICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucywKICAgICAgICAgICAgICAgIHJvdXRlcjogcm91dGVyLAogICAgICAgICAgICAgICAgc2l0ZURhdGE6IHNpdGVEYXRhLAogICAgICAgICAgICAgICAgaXNTZXJ2ZXI6IGlzU2VydmVyCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gOTsKICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSg0KTsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihfY29udGV4dC50MCk7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgYXBwID0gbmV3IFZ1ZShPYmplY3QuYXNzaWduKG9wdGlvbnMsIHsKICAgICAgICAgICAgICByb3V0ZXI6IHJvdXRlciwKICAgICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gaCgnZGl2JywgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGlkOiAnYXBwJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBbaCgnUm91dGVyVmlldycsIHsKICAgICAgICAgICAgICAgICAgcmVmOiAnbGF5b3V0JwogICAgICAgICAgICAgICAgfSksIGgoJ2RpdicsIHsKICAgICAgICAgICAgICAgICAgImNsYXNzIjogJ2dsb2JhbC11aScKICAgICAgICAgICAgICAgIH0sIGdsb2JhbFVJQ29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKGNvbXBvbmVudCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gaChjb21wb25lbnQpOwogICAgICAgICAgICAgICAgfSkpXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBhcHA6IGFwcCwKICAgICAgICAgICAgICByb3V0ZXI6IHJvdXRlcgogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbNCwgOV1dKTsKICB9KSk7CiAgcmV0dXJuIF9jcmVhdGVBcHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},null]}