{"remainingRequest":"D:\\3-blog\\blog-vp\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\3-blog\\blog-vp\\node_modules\\@vuepress\\theme-default\\util\\index.js","dependencies":[{"path":"D:\\3-blog\\blog-vp\\node_modules\\@vuepress\\theme-default\\util\\index.js","mtime":499162500000},{"path":"D:\\3-blog\\blog-vp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\3-blog\\blog-vp\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}